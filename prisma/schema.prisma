generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Luka-5852@157.90.244.229:5432/sarolika_kuhinja?sslmode=disable"
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String   @id @default(uuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  role           Role     @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  accounts       Account[]
  sessions       Session[]
  createdPosts   Post[]    @relation("createdPosts")
  editedPosts    Post[]    @relation("editedPosts")
  createdMeals   Meal[]    @relation("createdMeals")
  editedMeals    Meal[]    @relation("editedMeals")
  createdWorkshops Workshop[] @relation("createdWorkshops")
  editedWorkshops Workshop[] @relation("editedWorkshops")

  @@index([id])
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                 String   @id @default(uuid())
  title              String
  slug               String   @unique
  description        String
  image              String
  isVisible          Boolean
  sections           Json
  createdBy          User     @relation("createdPosts", fields: [createdById], references: [id])
  createdById        String
  lastEditedBy       User     @relation("editedPosts", fields: [lastEditedById], references: [id])
  lastEditedById     String
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())

  @@index([slug])
  @@index([id])
}

model Meal {
  id                 String   @id @default(uuid())
  title              String
  slug               String   @unique
  description        String
  image              String
  isVisible          Boolean
  sections           Json
  createdBy          User     @relation("createdMeals", fields: [createdById], references: [id])
  createdById        String
  lastEditedBy       User     @relation("editedMeals", fields: [lastEditedById], references: [id])
  lastEditedById     String
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())

  @@index([slug])  
  @@index([id])
}

model Workshop {
  id                 String      @id @default(uuid())
  title              String
  slug               String      @unique
  description        String
  image              String
  isVisible          Boolean
  sections           Json
  date               DateTime
  maxApplicant       Int
  createdBy          User        @relation("createdWorkshops", fields: [createdById], references: [id])
  createdById        String
  lastEditedBy       User        @relation("editedWorkshops", fields: [lastEditedById], references: [id])
  lastEditedById     String
  updatedAt          DateTime    @updatedAt
  createdAt          DateTime    @default(now())
  applications       Application[]
  
  @@index([slug])
  @@index([id])
}


model Application {
  id                 String      @id @default(uuid())
  name               String
  surname            String
  telephone          String
  email              String?
  childName          String
  childAlergies      String?
  additionalNotes    String?
  workshopId         String
  photoPermission    Boolean
  workshop           Workshop    @relation(fields: [workshopId], references: [id], onDelete: Cascade)
}


model SectionType {
  id                 String      @id @default(uuid())
  title              String      @unique
  jsxContent         Json
  image              String
}

model NewsletterUsers {
  id                 String      @id @default(uuid())
  email              String      @unique
  name               String
  isVerified         Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model NewsletterVerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  email      String
  expires    DateTime
}

